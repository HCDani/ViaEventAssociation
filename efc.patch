diff --git a/ViaEventAssociation/src/Infrastructure/ViaEventAssociation.Infrastructure.Persistence/EFCDbContext.cs b/ViaEventAssociation/src/Infrastructure/ViaEventAssociation.Infrastructure.Persistence/EFCDbContext.cs
index abe8048..0f89099 100644
--- a/ViaEventAssociation/src/Infrastructure/ViaEventAssociation.Infrastructure.Persistence/EFCDbContext.cs
+++ b/ViaEventAssociation/src/Infrastructure/ViaEventAssociation.Infrastructure.Persistence/EFCDbContext.cs
@@ -1,7 +1,10 @@
 ﻿using Microsoft.EntityFrameworkCore;
+using Microsoft.EntityFrameworkCore.Design;
 using ViaEventAssociation.Core.Domain.Aggregates.EventNS;
+using ViaEventAssociation.Core.Domain.Aggregates.EventNS.Values;
 using ViaEventAssociation.Core.Domain.Aggregates.GuestNS;
 using ViaEventAssociation.Core.Domain.Aggregates.LocationNS;
+using ViaEventAssociation.Core.Domain.Entities.EventGuestParticipation;
 
 namespace ViaEventAssociation.Infrastructure.Persistence {
     public class EFCDbContext(DbContextOptions options) : DbContext(options) {
@@ -16,9 +19,80 @@ namespace ViaEventAssociation.Infrastructure.Persistence {
 
         protected override void OnModelCreating(ModelBuilder modelBuilder) {
             modelBuilder.ApplyConfigurationsFromAssembly(typeof(EFCDbContext).Assembly);
+
+            // Configure VEvent value objects as an owned type
+            modelBuilder.Entity<VEvent>(builder => {
+                builder.HasKey(g => g.Id);
+                builder.OwnsOne(v => v.Description, descriptionBuilder => {
+                    descriptionBuilder.Property(d => d.Value)
+                        .HasColumnName("Description"); // Column name in the VEvent table
+                });
+                // Configure EventDuration as an owned type
+                builder.OwnsOne(v => v.Duration, durationBuilder => {
+                    durationBuilder.Property(d => d.From)
+                        .HasColumnName("DurationFrom"); // Column name for the 'From' property
+
+                    durationBuilder.Property(d => d.To)
+                        .HasColumnName("DurationTo"); // Column name for the 'To' property
+                });
+                builder.OwnsOne(v => v.MaxNumberOfGuests, maxNumberOfGuestBuilder => {
+                    maxNumberOfGuestBuilder.Property(d => d.Value)
+                        .HasColumnName("MaxNumberOfGuests"); // Column name in the VEvent table
+                });
+                builder.OwnsOne(v => v.Title, titleBuilder => {
+                    titleBuilder.Property(d => d.Value)
+                        .HasColumnName("Title"); // Column name in the VEvent table
+                });
+
+            });
+            // Configure Guest value objects as an owned type
+            modelBuilder.Entity<Guest>(builder => {
+                builder.HasKey(g => g.Id);
+                builder.OwnsOne(v => v.Email, emailBuilder => {
+                    emailBuilder.Property(d => d.Value).HasColumnName("Email");
+                });
+                builder.OwnsOne(v => v.Name, nameBuilder => {
+                    nameBuilder.Property(d => d.FirstName).HasColumnName("FirstName");
+                    nameBuilder.Property(d => d.LastName).HasColumnName("LastName");
+                });
+                builder.OwnsOne(v => v.ProfilePictureUrl, profilePictureUrlBuilder => {
+                    profilePictureUrlBuilder.Property(d => d.Value).HasColumnName("PPUrl");
+                });
+            });
+            // Configure Location value objects as an owned type
+            modelBuilder.Entity<Location>(builder => {
+                builder.HasKey(g => g.Id);
+                builder.OwnsOne(v => v.LocationName, locationNameBuilder => {
+                    locationNameBuilder.Property(d => d.Value).HasColumnName("LocationName");
+                });
+                builder.OwnsOne(v => v.MaxCapacity, maxCapacityBuilder => {
+                    maxCapacityBuilder.Property(d => d.Value).HasColumnName("MaxCapacity");
+                });
+                builder.OwnsOne(v => v.Availability, availabilityBuilder => {
+                    availabilityBuilder.Property(d => d.From).HasColumnName("AvailabilityFrom");
+                    availabilityBuilder.Property(d => d.To).HasColumnName("AvailabilityTo");
+                });
+                builder.OwnsOne(v => v.Address, addressBuilder => {
+                    addressBuilder.Property(d => d.Street).HasColumnName("Street");
+                    addressBuilder.Property(d => d.City).HasColumnName("City");
+                    addressBuilder.Property(d => d.HouseNumber).HasColumnName("HouseNumber");
+                    addressBuilder.Property(d => d.PostalCode).HasColumnName("PostalCode");
+                });
+            });
+            // Configure Location value objects as an owned type
+            modelBuilder.Entity<EventParticipation>(builder => {
+                builder.HasKey(g => g.Id);
+            });
         }
         public DbSet<VEvent> Events => Set<VEvent>();
         public DbSet<Guest> Guests => Set<Guest>();
         public DbSet<Location> Locations => Set<Location>();
     }
-}
+    public class EFCDesignTimeDbContextFactory : IDesignTimeDbContextFactory<EFCDbContext> {
+        public EFCDbContext CreateDbContext(String[] args) {
+            var optionsBuilder = new DbContextOptionsBuilder<EFCDbContext>();
+            optionsBuilder.UseSqlite("Data Source=viaeventassociation.db");
+            return new EFCDbContext(optionsBuilder.Options);
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/Core/ViaEventAssociation.Core.Domain/Aggregates/Event/Values/Description.cs b/src/Core/ViaEventAssociation.Core.Domain/Aggregates/Event/Values/Description.cs
index 22c3cb5..cbda5e5 100644
--- a/src/Core/ViaEventAssociation.Core.Domain/Aggregates/Event/Values/Description.cs
+++ b/src/Core/ViaEventAssociation.Core.Domain/Aggregates/Event/Values/Description.cs
@@ -1,5 +1,6 @@
 ﻿using System;
 using System.Collections.Generic;
+using System.ComponentModel.DataAnnotations.Schema;
 using System.Linq;
 using System.Text;
 using System.Threading.Tasks;
diff --git a/src/Core/ViaEventAssociation.Core.Domain/Aggregates/Guest/Guest.cs b/src/Core/ViaEventAssociation.Core.Domain/Aggregates/Guest/Guest.cs
index 16ce079..af60fc0 100644
--- a/src/Core/ViaEventAssociation.Core.Domain/Aggregates/Guest/Guest.cs
+++ b/src/Core/ViaEventAssociation.Core.Domain/Aggregates/Guest/Guest.cs
@@ -9,17 +9,14 @@ namespace ViaEventAssociation.Core.Domain.Aggregates.GuestNS {
         public GuestName Name { get; private set; }
         public ProfilePictureUrl ProfilePictureUrl { get; private set; }
 
-        private Guest(Guid id, GuestName name, Email email, ProfilePictureUrl profilePictureUrl) : base(id) {
-            Name = name;
-            Email = email;
-            ProfilePictureUrl = profilePictureUrl;
+        private Guest(Guid id) : base(id) {
         }
 
         public static Result<Guest> RegisterGuest(Guid id, GuestName guestName, Email email, ProfilePictureUrl profilePictureUrl) {
             if (guestName == null) return new Result<Guest>(134, "Guest name cannot be empty.");
             if (email == null) return new Result<Guest>(120, "Email cannot be empty.");
             if (profilePictureUrl == null) return new Result<Guest>(140, "Profile picture URL cannot be empty.");
-            return new Result<Guest>(new Guest(id, guestName, email, profilePictureUrl));
+            return new Result<Guest>(new Guest(id) { Name=guestName, Email=email, ProfilePictureUrl=profilePictureUrl });
         }
     }
 }
diff --git a/src/Core/ViaEventAssociation.Core.Domain/Entities/EventGuestParticipation/EventParticipation.cs b/src/Core/ViaEventAssociation.Core.Domain/Entities/EventGuestParticipation/EventParticipation.cs
index 129b895..3a61fd2 100644
--- a/src/Core/ViaEventAssociation.Core.Domain/Entities/EventGuestParticipation/EventParticipation.cs
+++ b/src/Core/ViaEventAssociation.Core.Domain/Entities/EventGuestParticipation/EventParticipation.cs
@@ -14,13 +14,10 @@ using ViaEventAssociation.Core.Domain.Entities.EventGuestParticipation.Contracts
 namespace ViaEventAssociation.Core.Domain.Entities.EventGuestParticipation {
     public class EventParticipation : Entity<Guid> {
         public ParticipationStatus ParticipationStatus { get; private set; }
-        public Guest Guest { get; }
-        public VEvent Event { get; }
+        public Guest Guest { get; private set; }
+        public VEvent Event { get; private set; }
 
-        private EventParticipation(Guid id, Guest guest, VEvent vEvent, ParticipationStatus status) : base(id) {
-            Guest = guest;
-            Event = vEvent;
-            ParticipationStatus = status;
+        private EventParticipation(Guid id) : base(id) {
         }
 
         public static Result<EventParticipation> Create(Guid id, Guest guest, VEvent vEvent, ParticipationStatus participationStatus, IGetEventParticipants eventParticipants) {
@@ -39,7 +36,7 @@ namespace ViaEventAssociation.Core.Domain.Entities.EventGuestParticipation {
             }
             if (vEvent.Status == EventStatus.Active && vEvent.Duration.From < DateTime.Now) return new Result<EventParticipation>(156, "Guest cannot participate in an already active event.");
             
-            return new Result<EventParticipation>(new EventParticipation(id, guest, vEvent, participationStatus));
+            return new Result<EventParticipation>(new EventParticipation(id) { ParticipationStatus = participationStatus, Guest = guest, Event = vEvent });
         }
         public Result<EventParticipation> UpdateStatus(ParticipationStatus status, IGetEventParticipants eventParticipants) {
             if (Event.Status == EventStatus.Cancelled) return new Result<EventParticipation>(157, "Guest cannot participate in a cancelled event.");
